name: (beta)Get-AuditLogQuery
 
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_TENANT_NAME: ${{ secrets.AZURE_TENANT_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      SITE_NAME: ${{ secrets.SITE_NAME }}
      DOC_LIB: ${{ secrets.DOC_LIB }}
      
    steps:
    - uses: actions/checkout@v4
    - name: Set env
      shell: bash
      run: |
       
        japanTimeZone="Asia/Tokyo"
        
        # 昨日の日付
        japanYesterday=$(TZ=$japanTimeZone date -d "yesterday" +"%Y-%m-%d")
        echo "YESTERDAY_DATE=$japanYesterday" >> $GITHUB_ENV

        # 今日の日付
        japanToday=$(TZ=$japanTimeZone date -d "today" +"%Y-%m-%d")
        echo "TODAY_DATE=$japanToday" >> $GITHUB_ENV
    
        # 昨日の年と月
        japanYesterdayYear=$(TZ=$japanTimeZone date -d "yesterday" +"%Y")
        japanYesterdayMonth=$(TZ=$japanTimeZone date -d "yesterday" +"%m")
    
        # 月が1～3なら、年度は前年（年を-1）
        if [ "$japanYesterdayMonth" -le 3 ]; then
          japanSchoolYear=$((japanYesterdayYear - 1))
        else
          japanSchoolYear=$japanYesterdayYear
        fi
    
        echo "YESTERDAY_SCHOOL_YEAR=$japanSchoolYear" >> $GITHUB_ENV
    
        # 非匿名化フォルダ
        echo "UNCONCEALED_DIR=M365UsageRecords/AuditLogQuery/UnConcealed" >> $GITHUB_ENV
        
    - name: Get AuditLogQueryId from cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/AuditlogQueryId/response_id.txt
        key: response-id-${{ env.TODAY_DATE }}
        restore-keys: |
          response-id-
          
    - name: Set env2
      shell: bash
      run: |
    
        # response_id.txt の中身を取得して環境変数に設定
        # responseId=cat ${{ github.workspace }}/AuditlogQueryId/response_id.txt
        responseId=$(cat "${{ github.workspace }}/AuditlogQueryId/response_id.txt")
        echo "Audit Log Query ID: $responseId"
        echo "RESPONSE_ID=$responseId" >> $GITHUB_ENV
        
    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Microsoft.Graph.Beta.Securityモジュールのインストール
      shell: pwsh
      run: |
        Install-Module -Name Microsoft.Graph.Beta.Security -Force
        Import-Module Microsoft.Graph.Beta.Security
        
    - name: Azure AD OIDC Token
      id: get_token
      run: |
        # フェデレーショントークンの取得
        federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        
        # アクセストークンの取得
        response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -F client_id=$AZURE_CLIENT_ID \
            -F grant_type=client_credentials \
            -F scope=https://graph.microsoft.com/.default \
            -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
            -F client_assertion=$federated_token)
        
        # レスポンスの処理とエラーチェック
        if [ -z "$(echo $response | jq -r '.access_token')" ]; then
            echo "Failed to retrieve access token"
            exit 1
        fi
        
        access_token=$(echo $response | jq -r '.access_token')
        echo $access_token
        echo $access_token | cut -d '.' -f2 | base64 --decode | jq
        echo "GRAPH_TOKEN=$access_token" >> $GITHUB_ENV
        
    - name: Acquire Access Token (For Upload MgReport)
      id: aat_sharepoint
      shell: bash
      run: |
        federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -F client_id=$AZURE_CLIENT_ID \
            -F grant_type=client_credentials \
            -F scope=https://$AZURE_TENANT_NAME.sharepoint.com/.default \
            -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
            -F client_assertion=$federated_token)
        access_token=$(echo $response | jq -r '.access_token')
        echo "SHAREPOINT_TOKEN=$access_token" >> $GITHUB_ENV
        
    - name: Query Audit Logs
      shell: pwsh
      run: |
        $dateStr = $env:YESTERDAY_DATE
        $date = ([Datetime]$dateStr)
        $school_year = $env:YESTERDAY_SCHOOL_YEAR
        $accessToken = $env:GRAPH_TOKEN
        $outputDir = "$env:UNCONCEALED_DIR/AzureActiveDirectoryStsLogon/$school_year"
        $outputPath = "$outputDir/${dateStr}_result_Get-AuditLogQuery_AzureActiveDirectoryStsLogon.csv"
        $SearchId = $env:RESPONSE_ID
        $headers = @{
            "Authorization" = "Bearer $accessToken"
            "Content-Type"  = "application/json"
        }

        # ディレクトリが存在しない場合は作成
        if (-not (Test-Path -Path $outputDir)) {
            New-Item -Path $outputDir -ItemType Directory
        }
        
        # secureTokenを使って認証
        $secureToken = ConvertTo-SecureString $accessToken -AsPlainText -Force
        
        # Microsoft Graphに接続
        try {
            Connect-MgGraph -AccessToken $secureToken
            Write-Host "Successfully connected to Microsoft Graph"
        } catch {
            Write-Error "Failed to connect to Microsoft Graph: $_"
            exit 1
        }

        # クエリパラメータの定義とリクエスト送信
        try {
            # 監査ログのすべてのレコードを格納する配列
            $AuditRecords = @()

            # 初回リクエストでデータと次のリンクを取得
            $Uri = ("https://graph.microsoft.com/beta/security/auditLog/queries/{0}/records" -f $SearchId)
            $SearchRecords = Invoke-MgGraphRequest -Uri $Uri -Method GET -Headers $headers
            
            if ($SearchRecords -and $SearchRecords.value.Count -gt 0) {
                Write-Host "First Record in SearchRecords:"
                # 各レコードから必要なフィールドを抽出してオブジェクト化し、$AuditRecords に追加
                foreach ($record in $SearchRecords.value) {
                    $AuditRecords += [PSCustomObject]@{
                        service              = $record.service
                        userType             = $record.userType
                        userId               = $record.userId
                        userPrincipalName    = $record.userPrincipalName
                        operation            = $record.operation
                        auditLogRecordType   = $record.auditLogRecordType
                        objectId             = $record.objectId
                        id                   = $record.id
                        createdDateTime      = $record.createdDateTime
                        organizationId       = $record.organizationId
                    }
                }

                $NextLink = $SearchRecords.'@odata.nextLink'

                # ページネーション処理
                While ($null -ne $NextLink) {
                    $SearchRecords = Invoke-MgGraphRequest -Uri $NextLink -Method GET -Headers $headers
                    # 各レコードから必要なフィールドを抽出してオブジェクト化し、$AuditRecords に追加
                    foreach ($record in $SearchRecords.value) {
                        $AuditRecords += [PSCustomObject]@{
                            service              = $record.service
                            userType             = $record.userType
                            userId               = $record.userId
                            userPrincipalName     = $record.userPrincipalName
                            operation            = $record.operation
                            auditLogRecordType   = $record.auditLogRecordType
                            objectId             = $record.objectId
                            id                   = $record.id
                            createdDateTime      = $record.createdDateTime
                            organizationId       = $record.organizationId
                        }
                    }
                    Write-Host ("{0} audit records fetched so far..." -f $AuditRecords.count)
                    $NextLink = $SearchRecords.'@odata.nextLink'
                }

                # 取得した監査ログをCSVファイルにエクスポート
                if ($AuditRecords.Count -gt 0) {
                    Write-Host "Exporting the following records to CSV:"
            
                    # CSVにエクスポート
                    $AuditRecords | Export-Csv -Path $outputPath -NoTypeInformation
                    Write-Host "監査ログが $outputPath に出力されました"
                } else {
                    Write-Host "監査ログの結果はありませんでした。"
                }
            } else {
                Write-Host "監査ログの結果が見つかりませんでした。"
            }
        } catch {
            Write-Error "Failed to query audit logs: $_"
            exit 1
        }

    - name: Upload QueryAuditLogsRecords to SharePoint
      shell: pwsh
      run: |
        $dateStr = $env:YESTERDAY_DATE
        $school_year = $env:YESTERDAY_SCHOOL_YEAR
        # フォルダ名とそれに対応するファイルパス
        $foldersAndFiles = @(
          @{ name = "AzureActiveDirectoryStsLogon"; file = "${dateStr}_result_Get-AuditLogQuery_AzureActiveDirectoryStsLogon.csv" }
        )
        
        # フォルダを作成する関数
        function Create-FolderRecursively {
            param (
                [string]$folderPath
            )
            $parts = $folderPath.TrimStart("/").Split('/')
            $currentPath = "/sites/$env:SITE_NAME/$env:DOC_LIB"
            
            foreach ($part in $parts) {
                $currentPath = "$currentPath/$part"
                $encodedPath = [uri]::EscapeDataString($currentPath.Trim('/'))
                $checkUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('$encodedPath')"
                $createUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/folders"
                
                try {
                    # フォルダが存在するか確認
                    Invoke-RestMethod -Uri $checkUrl -Method Get -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" }
                } catch {
                    # フォルダが存在しない場合は作成
                    Write-Host "フォルダ '$currentPath' を作成しています..."
                    $body = @{ "__metadata" = @{ "type" = "SP.Folder" }; "ServerRelativeUrl" = $currentPath } | ConvertTo-Json
                    Invoke-RestMethod -Uri $createUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose"; "Content-Type" = "application/json;odata=verbose" } -Body $body
                }
            }
        }

        # ファイルとフォルダの処理
        foreach ($item in $foldersAndFiles) {
            $name = $item.name
            $filePath = "$env:UNCONCEALED_DIR/$name/$school_year/$($item.file)"
            $fileName = [System.IO.Path]::GetFileName($filePath)
            $folder = "/$env:UNCONCEALED_DIR/$name/$school_year"

            # フォルダを1つずつ作成
            Create-FolderRecursively -folderPath $folder

            $uploadUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('/sites/$env:SITE_NAME/$env:DOC_LIB$folder')/Files/add(url='$fileName',overwrite=true)"
      
            # ファイルの存在を確認してアップロード
            if (Test-Path $filePath) {
                $fileContent = [System.IO.File]::ReadAllBytes($filePath)
                Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" } -Body $fileContent -ContentType "application/octet-stream"
                Write-Host "ファイル '$filePath' をアップロードしました。"
            } else {
                Write-Host "ファイル '$filePath' が見つかりません。"
            }
        }
        
