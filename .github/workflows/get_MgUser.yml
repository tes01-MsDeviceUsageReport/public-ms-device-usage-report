# EntraIDユーザー情報取得→SharePointへUpload
name: Get-MgUser(EntraIDUser)
 
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_TENANT_NAME: ${{ secrets.AZURE_TENANT_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      SITE_NAME: ${{ secrets.SITE_NAME }}
      DOC_LIB: ${{ secrets.DOC_LIB }}
      
    steps:
    - name: Set env
      shell: bash
      run: |
        japanTimeZone="Asia/Tokyo"
        
        # 今日の日付
        japanToday=$(TZ=$japanTimeZone date -d "today" +"%Y-%m-%d")
        echo "TODAY_DATE=$japanToday" >> $GITHUB_ENV
    
        # 今日の年と月
        japanTodayYear=$(TZ=$japanTimeZone date -d "today" +"%Y")
        japanTodayMonth=$(TZ=$japanTimeZone date -d "today" +"%m")
    
        # 月が1～3なら、年度は前年（年を-1）
        if [ "$japanTodayMonth" -le 3 ]; then
          japanSchoolYear=$((japanTodayYear - 1))
        else
          japanSchoolYear=$japanTodayYear
        fi
    
        echo "TODAY_SCHOOL_YEAR=$japanSchoolYear" >> $GITHUB_ENV
    
        # 非匿名化フォルダ
        echo "UNCONCEALED_DIR=Roster/MsGraph/UnConcealed" >> $GITHUB_ENV
      
    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Acquire Access Token (For Get Mg-User)
      id: aat_graph
      shell: bash
      run: |
        federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -F client_id=$AZURE_CLIENT_ID \
            -F grant_type=client_credentials \
            -F scope=https://graph.microsoft.com/.default \
            -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
            -F client_assertion=$federated_token)
        access_token=$(echo $response | jq -r '.access_token')
        echo "GRAPH_TOKEN=$access_token" >> $GITHUB_ENV

    - name: Acquire Access Token (For Upload Mg-User)
      id: aat_sharepoint
      shell: bash
      run: |
        federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -F client_id=$AZURE_CLIENT_ID \
            -F grant_type=client_credentials \
            -F scope=https://$AZURE_TENANT_NAME.sharepoint.com/.default \
            -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
            -F client_assertion=$federated_token)
        access_token=$(echo $response | jq -r '.access_token')
        echo "SHAREPOINT_TOKEN=$access_token" >> $GITHUB_ENV
        
    - name: Get MgUser
      shell: pwsh
      run: |
        # 日付設定
        $dateStr = $env:TODAY_DATE
        $school_year = $env:TODAY_SCHOOL_YEAR

        $secureToken = ConvertTo-SecureString $env:GRAPH_TOKEN -AsPlainText -Force
        Connect-MgGraph -AccessToken $secureToken

        # 出力先のディレクトリを作成（存在しない場合）
        $outputDir = "$env:UNCONCEALED_DIR/MgUser/$school_year"
        if (-not (Test-Path -Path $outputDir)) {
            New-Item -Path $outputDir -ItemType Directory
        }
        # ユーザー情報を取得 → CSV形式に変換して出力
        $users = Get-MgUser -All
        Write-Host "ユーザー情報: $($users.Count) 件取得"
        $outputPath = "$outputDir/${dateStr}_result_Get-MgUser.csv"
        # $users | Select-Object DisplayName, UserPrincipalName, Id | Export-Csv -Path $outputPath -NoTypeInformation
        $users | Export-Csv -Path $outputPath -NoTypeInformation
        Write-Host "ユーザー情報(csv返還後): $($users.Count) 件取得"
        # 取得したユーザー情報を確認
        Disconnect-MgGraph

    - name: Upload MgUser to SharePoint
      shell: pwsh
      run: |
        $dateStr = $env:TODAY_DATE
        $school_year = $env:TODAY_SCHOOL_YEAR

        # フォルダ名とそれに対応するファイルパス
        $foldersAndFiles = @(
          @{ name = "MgUser"; file = "${dateStr}_result_Get-MgUser.csv" }
        )
        
        # フォルダを作成する関数
        function CreateFolderRecursively {
            param (
                [string]$folderPath
            )
            $parts = $folderPath.TrimStart("/").Split('/')
            $currentPath = "/sites/$env:SITE_NAME/$env:DOC_LIB"
            
            foreach ($part in $parts) {
                $currentPath = "$currentPath/$part"
                $encodedPath = [uri]::EscapeDataString($currentPath.Trim('/'))
                $checkUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('$encodedPath')"
                $createUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/folders"
                
                try {
                    # フォルダが存在するか確認
                    Invoke-RestMethod -Uri $checkUrl -Method Get -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" }
                } catch {
                    # フォルダが存在しない場合は作成
                    Write-Host "フォルダ '$currentPath' を作成しています..."
                    $body = @{ "__metadata" = @{ "type" = "SP.Folder" }; "ServerRelativeUrl" = $currentPath } | ConvertTo-Json
                    Invoke-RestMethod -Uri $createUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose"; "Content-Type" = "application/json;odata=verbose" } -Body $body
                }
            }
        }

        # ファイルとフォルダの処理
        foreach ($item in $foldersAndFiles) {
            $name = $item.name
            $filePath = "$env:UNCONCEALED_DIR/$name/$school_year/$($item.file)"
            $fileName = [System.IO.Path]::GetFileName($filePath)
            $folder = "/$env:UNCONCEALED_DIR/$name/$school_year"

            # フォルダを1つずつ作成
            CreateFolderRecursively -folderPath $folder

            $uploadUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('/sites/$env:SITE_NAME/$env:DOC_LIB$folder')/Files/add(url='$fileName',overwrite=true)"
      
            # ファイルの存在を確認してアップロード
            if (Test-Path $filePath) {
                $fileContent = [System.IO.File]::ReadAllBytes($filePath)
                Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" } -Body $fileContent -ContentType "application/octet-stream"
                Write-Host "ファイル '$filePath' をアップロードしました。"
            } else {
                Write-Host "ファイル '$filePath' が見つかりません。"
            }
        }
