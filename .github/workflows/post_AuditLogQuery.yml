name: (beta)Post AuditLogQuery
 
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_TENANT_NAME: ${{ secrets.AZURE_TENANT_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      SITE_NAME: ${{ secrets.SITE_NAME }}
      DOC_LIB: ${{ secrets.DOC_LIB }}
      
    steps:
    - uses: actions/checkout@v4
    - name: Set env
      shell: bash
      run: |
        japanTimeZone="Asia/Tokyo"
        
        # 昨日の日付
        japanYesterday=$(TZ=$japanTimeZone date -d "yesterday" +"%Y-%m-%d")
        echo "YESTERDAY_DATE=$japanYesterday" >> $GITHUB_ENV

        # 2日前の日付
        japanTwoDaysAgo=$(TZ=$japanTimeZone date -d "2 days ago" +"%Y-%m-%d")
        echo "TWO_DAYS_AGO=$japanTwoDaysAgo" >> $GITHUB_ENV
        
        # 今日の日付
        japanToday=$(TZ=$japanTimeZone date -d "today" +"%Y-%m-%d")
        echo "TODAY_DATE=$japanToday" >> $GITHUB_ENV
        
    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Microsoft.Graph.Beta.Securityモジュールのインストール
      shell: pwsh
      run: |
        Install-Module -Name Microsoft.Graph.Beta.Security -Force
        Import-Module Microsoft.Graph.Beta.Security

    - name: Azure AD OIDC Token
      id: get_token
      run: |
        # フェデレーショントークンの取得
        federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        # フェデレーショントークンが取得できているか確認
        echo "Federated token: $federated_token"
        
        # アクセストークンの取得
        response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -F client_id=$AZURE_CLIENT_ID \
            -F grant_type=client_credentials \
            -F scope=https://graph.microsoft.com/.default \
            -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
            -F client_assertion=$federated_token)
        # Azure AD からのレスポンスを表示
        echo "Response from Azure AD: $response"
        
        # レスポンスの処理とエラーチェック
        if [ -z "$(echo $response | jq -r '.access_token')" ]; then
            echo "Failed to retrieve access token"
            exit 1
        fi
        
        access_token=$(echo $response | jq -r '.access_token')
        echo $access_token
        echo $access_token | cut -d '.' -f2 | base64 --decode | jq
        echo "GRAPH_TOKEN=$access_token" >> $GITHUB_ENV

    - name: Query Audit Logs
      shell: pwsh
      run: |
        $accessToken = $env:GRAPH_TOKEN
        $graphApiUrl = "https://graph.microsoft.com/beta/security/auditLog/queries"
        $headers = @{
            "Authorization" = "Bearer $accessToken"
            "Content-Type"  = "application/json"
        }
        
        # JSTの前日分のデータを取るためのUTC時刻調整
        $target_start_date = $env:TWO_DAYS_AGO + "T15:00:00Z"
        $target_end_date = $env:YESTERDAY_DATE + "T14:59:59Z"
        
        # クエリパラメータの定義
        $body = @{
            "@odata.type" = "#microsoft.graph.security.auditLogQuery"
            "displayName" = "test_AuditLogQuery"
            "filterStartDateTime" = [System.DateTime]::Parse($target_start_date)
            "filterEndDateTime" = [System.DateTime]::Parse($target_end_date)
            "recordTypeFilters" = @(
                "azureActiveDirectoryAccountLogon",
                "azureActiveDirectoryStsLogon"
            )
        } | ConvertTo-Json
    
        # ディレクトリの作成
        $outputDir = "$env:GITHUB_WORKSPACE/AuditlogQueryId"
        if (-not (Test-Path -Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir
        }

        try {
            # クエリの実行
            $response = Invoke-RestMethod -Uri $graphApiUrl -Method Post -Headers $headers -Body $body
            $response

            # Idをファイルに保存
            $response.Id | Out-File -FilePath "${outputDir}/response_id.txt"
            Write-Output "AuditLogQueryID saved: $response.Id"
        } catch {
            Write-Error "Failed to query audit logs: $_"
            exit 1
        }
        
    - name: Check if file exists
      run: |
        ls ${{ github.workspace }}/AuditlogQueryId/

    - name: cache AuditLogQueryID
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/AuditlogQueryId/response_id.txt
        key: response-id-${{ env.TODAY_DATE }}
        restore-keys: |
          response-id-
